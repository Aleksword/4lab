(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 11.11.2020 16:13:58         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BusinessClasses_Interface.inc}
{$DEFINE BusinessClasses_Interface.inc}

{$IFNDEF BusinessClasses_unitheader}
unit BusinessClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TNew_ModelRoot = class;
  TNew_ModelRootList = class;
  TClient = class;
  TClientList = class;
  TPlace = class;
  TPlaceList = class;
  TSPR = class;
  TSPRList = class;

  TNew_ModelRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TClient = class(TNew_ModelRoot)
  private
    function _Get_M_Passport: TBAFloat;
    function _GetPassport: double;
    procedure _SetPassport(const NewValue: double);
    function _Get_M_FIO: TBAString;
    function _GetFIO: String;
    procedure _SetFIO(const NewValue: String);
    function _Get_M_ID_Client: TBAInteger;
    function _GetID_Client: Integer;
    procedure _SetID_Client(const NewValue: Integer);
    function _GetPlace: TPlace;
    function _Get_M_Place: TBoldObjectReference;
    procedure _SetPlace(const value: TPlace);
    function _GetSPR: TSPR;
    function _Get_M_SPR: TBoldObjectReference;
  protected
  public
    property M_Passport: TBAFloat read _Get_M_Passport;
    property M_FIO: TBAString read _Get_M_FIO;
    property M_ID_Client: TBAInteger read _Get_M_ID_Client;
    property M_Place: TBoldObjectReference read _Get_M_Place;
    property M_SPR: TBoldObjectReference read _Get_M_SPR;
    property Passport: double read _GetPassport write _SetPassport;
    property FIO: String read _GetFIO write _SetFIO;
    property ID_Client: Integer read _GetID_Client write _SetID_Client;
    property Place: TPlace read _GetPlace write _SetPlace;
    property SPR: TSPR read _GetSPR;
  end;

  TPlace = class(TNew_ModelRoot)
  private
    function _Get_M_ID_Place: TBAInteger;
    function _GetID_Place: Integer;
    procedure _SetID_Place(const NewValue: Integer);
    function _Get_M_ID_Room: TBAInteger;
    function _GetID_Room: Integer;
    procedure _SetID_Room(const NewValue: Integer);
    function _Get_M_Place_number: TBAInteger;
    function _GetPlace_number: Integer;
    procedure _SetPlace_number(const NewValue: Integer);
    function _GetClient: TClientList;
    function _GetSPR: TSPRList;
  protected
  public
    property M_ID_Place: TBAInteger read _Get_M_ID_Place;
    property M_ID_Room: TBAInteger read _Get_M_ID_Room;
    property M_Place_number: TBAInteger read _Get_M_Place_number;
    property M_Client: TClientList read _GetClient;
    property M_SPR: TSPRList read _GetSPR;
    property ID_Place: Integer read _GetID_Place write _SetID_Place;
    property ID_Room: Integer read _GetID_Room write _SetID_Room;
    property Place_number: Integer read _GetPlace_number write _SetPlace_number;
    property Client: TClientList read _GetClient;
    property SPR: TSPRList read _GetSPR;
  end;

  TSPR = class(TNew_ModelRoot)
  private
    function _GetPlace: TPlace;
    function _Get_M_Place: TBoldObjectReference;
    function _GetClient: TClient;
    function _Get_M_Client: TBoldObjectReference;
  protected
  public
    property M_Place: TBoldObjectReference read _Get_M_Place;
    property M_Client: TBoldObjectReference read _Get_M_Client;
    property Place: TPlace read _GetPlace;
    property Client: TClient read _GetClient;
  end;

  TNew_ModelRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TNew_ModelRoot;
    procedure SetBoldObject(index: Integer; NewObject: TNew_ModelRoot);
  public
    function Includes(anObject: TNew_ModelRoot): Boolean;
    function IndexOf(anObject: TNew_ModelRoot): Integer;
    procedure Add(NewObject: TNew_ModelRoot);
    function AddNew: TNew_ModelRoot;
    procedure Insert(index: Integer; NewObject: TNew_ModelRoot);
    property BoldObjects[index: Integer]: TNew_ModelRoot read GetBoldObject write SetBoldObject; default;
  end;

  TClientList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TClient;
    procedure SetBoldObject(index: Integer; NewObject: TClient);
  public
    function Includes(anObject: TClient): Boolean;
    function IndexOf(anObject: TClient): Integer;
    procedure Add(NewObject: TClient);
    function AddNew: TClient;
    procedure Insert(index: Integer; NewObject: TClient);
    property BoldObjects[index: Integer]: TClient read GetBoldObject write SetBoldObject; default;
  end;

  TPlaceList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TPlace;
    procedure SetBoldObject(index: Integer; NewObject: TPlace);
  public
    function Includes(anObject: TPlace): Boolean;
    function IndexOf(anObject: TPlace): Integer;
    procedure Add(NewObject: TPlace);
    function AddNew: TPlace;
    procedure Insert(index: Integer; NewObject: TPlace);
    property BoldObjects[index: Integer]: TPlace read GetBoldObject write SetBoldObject; default;
  end;

  TSPRList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TSPR;
    procedure SetBoldObject(index: Integer; NewObject: TSPR);
  public
    function Includes(anObject: TSPR): Boolean;
    function IndexOf(anObject: TSPR): Integer;
    procedure Add(NewObject: TSPR);
    function AddNew: TSPR;
    procedure Insert(index: Integer; NewObject: TSPR);
    property BoldObjects[index: Integer]: TSPR read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}
 